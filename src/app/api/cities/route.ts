import { NextRequest, NextResponse } from 'next/server';
import connectDB from '@/lib/mongodb';
import City from '@/models/City';

// GET /api/cities - –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–æ–≤ —Å –ø–æ–∏—Å–∫–æ–º
export async function GET(request: NextRequest) {
  try {
    await connectDB();

    const { searchParams } = new URL(request.url);
    const search = searchParams.get('search');
    const limit = parseInt(searchParams.get('limit') || '20');

    let query = {};
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å, –∏—â–µ–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
    if (search && search.trim()) {
      query = {
        name: { $regex: search.trim(), $options: 'i' }
      };
    }

    const cities = await City.find(query)
      .sort({ name: 1 })
      .limit(limit)
      .lean();

    return NextResponse.json({ cities });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ—Ä–æ–¥–æ–≤:', error);
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    );
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è slug –∏–∑ —Ä—É—Å—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
function createSlug(text: string): string {
  const rusToLat: Record<string, string> = {
    '–∞': 'a', '–±': 'b', '–≤': 'v', '–≥': 'g', '–¥': 'd', '–µ': 'e', '—ë': 'yo',
    '–∂': 'zh', '–∑': 'z', '–∏': 'i', '–π': 'y', '–∫': 'k', '–ª': 'l', '–º': 'm',
    '–Ω': 'n', '–æ': 'o', '–ø': 'p', '—Ä': 'r', '—Å': 's', '—Ç': 't', '—É': 'u',
    '—Ñ': 'f', '—Ö': 'h', '—Ü': 'ts', '—á': 'ch', '—à': 'sh', '—â': 'sch',
    '—ä': '', '—ã': 'y', '—å': '', '—ç': 'e', '—é': 'yu', '—è': 'ya'
  };

  return text
    .toLowerCase()
    .split('')
    .map(char => rusToLat[char] || char)
    .join('')
    .replace(/\s+/g, '-')
    .replace(/[^\w\-]+/g, '')
    .replace(/\-\-+/g, '-')
    .replace(/^-+/, '')
    .replace(/-+$/, '');
}

// POST /api/cities - —Å–æ–∑–¥–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ (–¥–ª—è –∞–¥–º–∏–Ω–∞)
export async function POST(request: NextRequest) {
  try {
    console.log('üèóÔ∏è –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞...');
    
    await connectDB();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');

    const body = await request.json();
    console.log('üì• –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ:', body);
    
    const { name, imageUrl } = body;

    if (!name || !imageUrl) {
      console.log('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö:', { name, imageUrl });
      return NextResponse.json(
        { error: '–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' },
        { status: 400 }
      );
    }

    // –°–æ–∑–¥–∞–µ–º slug –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è
    const slug = createSlug(name);
    console.log('üîó –°–æ–∑–¥–∞–Ω slug:', slug);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –≥–æ—Ä–æ–¥ —É–∂–µ
    const existingCity = await City.findOne({ 
      $or: [{ name }, { slug }] 
    });

    if (existingCity) {
      console.log('‚ö†Ô∏è –ì–æ—Ä–æ–¥ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', existingCity);
      return NextResponse.json(
        { error: '–ì–æ—Ä–æ–¥ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' },
        { status: 409 }
      );
    }

    console.log('üíæ –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥...');
    const city = new City({
      name,
      slug,
      imageUrl,
      eventsCount: 0,
    });

    const savedCity = await city.save();
    console.log('‚úÖ –ì–æ—Ä–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω:', savedCity);

    return NextResponse.json(savedCity, { status: 201 });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞:', error);
    console.error('Stack trace:', error);
    
    return NextResponse.json(
      { 
        error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
        details: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      },
      { status: 500 }
    );
  }
} 
const mongoose = require('mongoose');

require('dotenv').config({ path: __dirname + '/../.env.local' });
const MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/test';

async function testConnection() {
  try {
    console.log('üîó –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ MongoDB:', MONGODB_URI);
    
    await mongoose.connect(MONGODB_URI);
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —É—Å–ø–µ—à–Ω–æ!');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    const collections = await mongoose.connection.db.listCollections().toArray();
    console.log('üìã –ö–æ–ª–ª–µ–∫—Ü–∏–∏ –≤ –±–∞–∑–µ:', collections.map(c => c.name));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Ä–æ–¥–æ–≤
    const City = mongoose.model('City', new mongoose.Schema({
      name: String,
      slug: String,
      imageUrl: String,
      eventsCount: Number
    }, { timestamps: true }));
    
    const cityCount = await City.countDocuments();
    console.log('üèôÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Ä–æ–¥–æ–≤ –≤ –±–∞–∑–µ:', cityCount);
    
    if (cityCount > 0) {
      const cities = await City.find().limit(5);
      console.log('üìç –ü—Ä–∏–º–µ—Ä—ã –≥–æ—Ä–æ–¥–æ–≤:', cities.map(c => c.name));
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', error);
  } finally {
    await mongoose.connection.close();
    console.log('üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
  }
}

testConnection(); 
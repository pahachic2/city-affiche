// –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π

const BASE_URL = 'http://localhost:3001';

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
const testUser = {
  email: `test-event-${Date.now()}@example.com`,
  name: '–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π',
  password: 'testpass123'
};

const testEvent = {
  title: '–¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ü–µ—Ä—Ç –≤ –ø–∞—Ä–∫–µ',
  description: '–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ü–µ—Ä—Ç –ø–æ–¥ –æ—Ç–∫—Ä—ã—Ç—ã–º –Ω–µ–±–æ–º —Å —É—á–∞—Å—Ç–∏–µ–º –º–µ—Å—Ç–Ω—ã—Ö –º—É–∑—ã–∫–∞–Ω—Ç–æ–≤.',
  image: 'https://images.unsplash.com/photo-1493225457124-a3eb161ffa5f?w=800&h=600&fit=crop',
  city: '–ú–æ—Å–∫–≤–∞',
  category: '–ö–æ–Ω—Ü–µ—Ä—Ç—ã',
  date: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString().slice(0, 16), // —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é
  isOnline: false
};

let authToken = null;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
async function makeRequest(url, options = {}) {
  try {
    const response = await fetch(url, {
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      },
      ...options
    });

    const data = await response.json();
    return { response, data };
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ ${url}:`, error.message);
    return { error: error.message };
  }
}

// –¢–µ—Å—Ç 1: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function testRegister() {
  console.log('\nüîµ –¢–µ—Å—Ç 1: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞');
  
  const { response, data, error } = await makeRequest(`${BASE_URL}/api/auth/register`, {
    method: 'POST',
    body: JSON.stringify(testUser)
  });

  if (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏');
    return false;
  }

  if (response.status === 201 && data.token) {
    console.log('‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');
    console.log(`üìù –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${data.user.name}`);
    authToken = data.token;
    return true;
  } else {
    console.log(`‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ—É—Å–ø–µ—à–Ω–∞: ${data.error}`);
    return false;
  }
}

// –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
async function testCreateEvent() {
  console.log('\nüîµ –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π)');
  
  if (!authToken) {
    console.log('‚ùå –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
    return false;
  }

  const { response, data, error } = await makeRequest(`${BASE_URL}/api/events`, {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${authToken}`
    },
    body: JSON.stringify(testEvent)
  });

  if (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏');
    return false;
  }

  if (response.status === 201 && data._id) {
    console.log('‚úÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ');
    console.log(`üìù –ù–∞–∑–≤–∞–Ω–∏–µ: ${data.title}`);
    console.log(`üèôÔ∏è –ì–æ—Ä–æ–¥: ${data.city}`);
    console.log(`üìÖ –î–∞—Ç–∞: ${new Date(data.date).toLocaleString()}`);
    console.log(`üë§ –ê–≤—Ç–æ—Ä: ${data.authorId?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
    return true;
  } else {
    console.log(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è: ${data.error}`);
    return false;
  }
}

// –¢–µ—Å—Ç 3: –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
async function testCreateEventUnauthorized() {
  console.log('\nüîµ –¢–µ—Å—Ç 3: –°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (–Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π)');
  
  const { response, data, error } = await makeRequest(`${BASE_URL}/api/events`, {
    method: 'POST',
    body: JSON.stringify(testEvent)
  });

  if (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏');
    return false;
  }

  if (response.status === 401) {
    console.log('‚úÖ –î–æ—Å—Ç—É–ø –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–ø—Ä–µ—â–µ–Ω');
    console.log(`üìù –û—à–∏–±–∫–∞: ${data.error}`);
    return true;
  } else {
    console.log(`‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: ${response.status}`);
    return false;
  }
}

// –¢–µ—Å—Ç 4: –°–æ–∑–¥–∞–Ω–∏–µ —Å –Ω–µ–≤–µ—Ä–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º
async function testCreateEventInvalidToken() {
  console.log('\nüîµ –¢–µ—Å—Ç 4: –°–æ–∑–¥–∞–Ω–∏–µ —Å –Ω–µ–≤–µ—Ä–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º');
  
  const { response, data, error } = await makeRequest(`${BASE_URL}/api/events`, {
    method: 'POST',
    headers: {
      'Authorization': 'Bearer invalid-token-12345'
    },
    body: JSON.stringify(testEvent)
  });

  if (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏');
    return false;
  }

  if (response.status === 401 || response.status === 403) {
    console.log('‚úÖ –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω');
    console.log(`üìù –û—à–∏–±–∫–∞: ${data.error}`);
    return true;
  } else {
    console.log(`‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: ${response.status}`);
    return false;
  }
}

// –¢–µ—Å—Ç 5: –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª–µ–π
async function testCreateEventValidation() {
  console.log('\nüîµ –¢–µ—Å—Ç 5: –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π');
  
  const incompleteEvent = {
    title: '', // –ø—É—Å—Ç–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
    description: '',
    city: '',
    category: '',
    date: ''
  };

  const { response, data, error } = await makeRequest(`${BASE_URL}/api/events`, {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${authToken}`
    },
    body: JSON.stringify(incompleteEvent)
  });

  if (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏');
    return false;
  }

  if (response.status === 400) {
    console.log('‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    console.log(`üìù –û—à–∏–±–∫–∞: ${data.error}`);
    return true;
  } else {
    console.log(`‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞: ${response.status}`);
    return false;
  }
}

// –¢–µ—Å—Ç 6: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
async function testGetEvents() {
  console.log('\nüîµ –¢–µ—Å—Ç 6: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π');
  
  const { response, data, error } = await makeRequest(`${BASE_URL}/api/events?city=–ú–æ—Å–∫–≤–∞`);

  if (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏');
    return false;
  }

  if (response.status === 200 && data.events) {
    console.log('‚úÖ –°–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –ø–æ–ª—É—á–µ–Ω');
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π: ${data.events.length}`);
    
    // –ò—â–µ–º –Ω–∞—à–µ —Ç–µ—Å—Ç–æ–≤–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
    const ourEvent = data.events.find(event => event.title === testEvent.title);
    if (ourEvent) {
      console.log(`‚úÖ –ù–∞—à–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å–ø–∏—Å–∫–µ`);
    }
    
    return true;
  } else {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞: ${data.error}`);
    return false;
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function runTests() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π');
  console.log('='.repeat(50));
  
  const results = [];
  
  // –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç—ã –ø–æ –ø–æ—Ä—è–¥–∫—É
  results.push(await testRegister());
  results.push(await testCreateEvent());
  results.push(await testCreateEventUnauthorized());
  results.push(await testCreateEventInvalidToken());
  results.push(await testCreateEventValidation());
  results.push(await testGetEvents());
  
  // –ü–æ–¥–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
  console.log('\n' + '='.repeat(50));
  console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
  
  const passed = results.filter(r => r === true).length;
  const total = results.length;
  
  console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ: ${passed}/${total}`);
  console.log(`‚ùå –ù–µ—É—Å–ø–µ—à–Ω–æ: ${total - passed}/${total}`);
  
  if (passed === total) {
    console.log('üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!');
    console.log('üîó –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ: http://localhost:3001/create-event');
  } else {
    console.log('‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ.');
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
runTests().catch(console.error); 
const { MongoClient } = require('mongodb');
require('dotenv').config({ path: '.env.local' });

const MONGODB_URI = process.env.MONGODB_URI;

if (!MONGODB_URI) {
  console.error('‚ùå MONGODB_URI –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
  process.exit(1);
}

async function initVenuesCollection() {
  const client = new MongoClient(MONGODB_URI);
  
  try {
    console.log('üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB...');
    await client.connect();
    
    const db = client.db();
    console.log(`‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: ${db.databaseName}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ venues
    const collections = await db.listCollections({ name: 'venues' }).toArray();
    
    if (collections.length > 0) {
      console.log('üìã –ö–æ–ª–ª–µ–∫—Ü–∏—è venues already exists');
    } else {
      console.log('üÜï –°–æ–∑–¥–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é venues...');
      await db.createCollection('venues');
    }
    
    // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ venues
    console.log('üìä –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è venues...');
    
    const venuesCollection = db.collection('venues');
    
    // –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å slug –≤ —Ä–∞–º–∫–∞—Ö –≥–æ—Ä–æ–¥–∞
    await venuesCollection.createIndex(
      { city: 1, slug: 1 }, 
      { unique: true, name: 'city_slug_unique' }
    );
    
    // –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    await venuesCollection.createIndex(
      { city: 1, category: 1 },
      { name: 'city_category' }
    );
    
    await venuesCollection.createIndex(
      { city: 1, rating: -1 },
      { name: 'city_rating' }
    );
    
    await venuesCollection.createIndex(
      { authorId: 1 },
      { name: 'author' }
    );
    
    await venuesCollection.createIndex(
      { rating: -1 },
      { name: 'rating' }
    );
    
    await venuesCollection.createIndex(
      { createdAt: -1 },
      { name: 'created_date' }
    );
    
    console.log('‚úÖ –ò–Ω–¥–µ–∫—Å—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    const count = await venuesCollection.countDocuments();
    console.log(`üìà –ó–∞–≤–µ–¥–µ–Ω–∏–π –≤ –±–∞–∑–µ: ${count}`);
    
    console.log('üéâ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ venues –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    console.log('\nüìù –°–æ–∑–¥–∞–Ω–æ:');
    console.log('   ‚Ä¢ –ö–æ–ª–ª–µ–∫—Ü–∏—è venues');
    console.log('   ‚Ä¢ –ò–Ω–¥–µ–∫—Å —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ slug –ø–æ –≥–æ—Ä–æ–¥–∞–º');
    console.log('   ‚Ä¢ –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
    process.exit(1);
  } finally {
    await client.close();
    console.log('üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ');
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
initVenuesCollection(); 
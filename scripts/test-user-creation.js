const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');
require('dotenv').config({ path: '.env.local' });

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
const connectDB = async () => {
  try {
    await mongoose.connect(process.env.MONGODB_URI, {
      bufferCommands: false,
      maxPoolSize: 10,
      serverSelectionTimeoutMS: 5000,
      socketTimeoutMS: 45000,
      connectTimeoutMS: 10000,
    });
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ MongoDB');
    console.log(`üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${mongoose.connection.db?.databaseName || 'unknown'}`);
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', error);
    return false;
  }
};

// –°—Ö–µ–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ—á–Ω–æ —Ç–∞–∫–∞—è –∂–µ –∫–∞–∫ –≤ –º–æ–¥–µ–ª–∏)
const UserSchema = new mongoose.Schema({
  email: {
    type: String,
    required: true,
    lowercase: true,
    trim: true,
  },
  name: {
    type: String,
    required: true,
    trim: true,
  },
  password: {
    type: String,
    required: true,
  },
  avatar: {
    type: String,
    default: null,
  },
}, {
  timestamps: true,
});

// –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
UserSchema.index({ email: 1 }, { unique: true });

const User = mongoose.models.User || mongoose.model('User', UserSchema);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async function checkUsersCollection() {
  console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    const collections = await mongoose.connection.db.listCollections({ name: 'users' }).toArray();
    
    if (collections.length === 0) {
      console.log('‚ö†Ô∏è  –ö–æ–ª–ª–µ–∫—Ü–∏—è "users" –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      
      // –°–æ–∑–¥–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é
      await mongoose.connection.db.createCollection('users');
      console.log('‚úÖ –ö–æ–ª–ª–µ–∫—Ü–∏—è "users" —Å–æ–∑–¥–∞–Ω–∞');
    } else {
      console.log('‚úÖ –ö–æ–ª–ª–µ–∫—Ü–∏—è "users" —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    const userCount = await User.countDocuments();
    console.log(`üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${userCount}`);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if (userCount > 0) {
      const users = await User.find({}, 'email name createdAt').lean();
      console.log('üë• –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:');
      users.forEach((user, index) => {
        console.log(`   ${index + 1}. ${user.name} (${user.email}) - ${user.createdAt}`);
      });
    }
    
    return userCount;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏:', error);
    return -1;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function createTestUser() {
  console.log('\nüë§ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
  
  const testUser = {
    email: `test-user-${Date.now()}@example.com`,
    name: '–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
    password: 'testpassword123'
  };
  
  try {
    // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
    const saltRounds = 12;
    const hashedPassword = await bcrypt.hash(testUser.password, saltRounds);
    
    console.log('üîê –ü–∞—Ä–æ–ª—å –∑–∞—Ö–µ—à–∏—Ä–æ–≤–∞–Ω');
    
    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const newUser = new User({
      email: testUser.email,
      name: testUser.name,
      password: hashedPassword,
    });
    
    console.log('üìù –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ–∑–¥–∞–Ω');
    console.log(`   Email: ${newUser.email}`);
    console.log(`   Name: ${newUser.name}`);
    console.log(`   Password hash: ${newUser.password.substring(0, 20)}...`);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...');
    const savedUser = await newUser.save();
    
    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!');
    console.log(`   ID: ${savedUser._id}`);
    console.log(`   –°–æ–∑–¥–∞–Ω: ${savedUser.createdAt}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤ –ë–î
    const foundUser = await User.findById(savedUser._id);
    if (foundUser) {
      console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ –ë–î –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
    } else {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï –Ω–∞–π–¥–µ–Ω –≤ –ë–î –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
    }
    
    return savedUser;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ—à–∏–±–æ–∫
    if (error.code === 11000) {
      console.error('   –ü—Ä–∏—á–∏–Ω–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    } else if (error.name === 'ValidationError') {
      console.error('   –ü—Ä–∏—á–∏–Ω–∞: –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö');
      console.error('   –î–µ—Ç–∞–ª–∏:', error.errors);
    } else if (error.name === 'MongoNetworkError') {
      console.error('   –ü—Ä–∏—á–∏–Ω–∞: –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ MongoDB');
    }
    
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ API
async function testAPIRegistration() {
  console.log('\nüåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ API...');
  
  const testUser = {
    email: `api-test-${Date.now()}@example.com`,
    name: 'API –¢–µ—Å—Ç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
    password: 'apitest123'
  };
  
  try {
    const response = await fetch('http://localhost:3000/api/auth/register', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(testUser),
    });
    
    const data = await response.json();
    
    if (response.ok) {
      console.log('‚úÖ API —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');
      console.log(`   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${data.user.name} (${data.user.email})`);
      console.log(`   ID: ${data.user._id}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –ë–î
      const dbUser = await User.findById(data.user._id);
      if (dbUser) {
        console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ –ë–î —á–µ—Ä–µ–∑ API');
      } else {
        console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï –Ω–∞–π–¥–µ–Ω –≤ –ë–î —á–µ—Ä–µ–∑ API');
      }
      
      return data.user;
    } else {
      console.log('‚ùå API —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ—É—Å–ø–µ—à–Ω–∞:', data.error);
      return null;
    }
    
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ API –∑–∞–ø—Ä–æ—Å–∞:', error.message);
    return null;
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function runDiagnostics() {
  console.log('üöÄ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n');
  
  // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
  const connected = await connectDB();
  if (!connected) {
    console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î. –¢–µ—Å—Ç—ã –æ—Ç–º–µ–Ω–µ–Ω—ã.');
    return;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é
  const userCount = await checkUsersCollection();
  
  // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–ø—Ä—è–º—É—é
  const directUser = await createTestUser();
  
  // –¢–µ—Å—Ç–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ API (–Ω—É–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä)
  const apiUser = await testAPIRegistration();
  
  // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
  console.log('\nüìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
  const finalCount = await User.countDocuments();
  console.log(`   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ë–î: ${finalCount}`);
  console.log(`   –ë—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ: ${finalCount - (userCount >= 0 ? userCount : 0)}`);
  
  // –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç –ë–î
  await mongoose.disconnect();
  console.log('\nüîå –û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç MongoDB');
  
  if (directUser || apiUser) {
    console.log('\nüéâ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ä–∞–±–æ—Ç–∞–µ—Ç!');
  } else {
    console.log('\n‚ö†Ô∏è  –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
  }
}

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  runDiagnostics().catch(console.error);
}

module.exports = { runDiagnostics, createTestUser, checkUsersCollection }; 
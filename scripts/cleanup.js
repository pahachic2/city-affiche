// –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–æ—Ä–æ–¥–æ–≤

async function cleanup() {
  console.log('üßπ –û—á–∏—Å—Ç–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–æ—Ä–æ–¥–æ–≤...\n');
  
  try {
    // 1. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≥–æ—Ä–æ–¥–æ–≤
    const response = await fetch('http://localhost:3000/api/cities');
    const data = await response.json();
    const cities = data.cities || [];
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –≥–æ—Ä–æ–¥–æ–≤: ${cities.length}\n`);
    
    // 2. –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –≥–æ—Ä–æ–¥–∞
    const testCities = cities.filter(city => 
      city.name.includes('–¢–µ—Å—Ç') || 
      city.name.includes('Test') ||
      city.slug.includes('test')
    );
    
    for (const city of testCities) {
      try {
        const deleteResponse = await fetch(`http://localhost:3000/api/cities/${city.slug}`, {
          method: 'DELETE'
        });
        
        if (deleteResponse.ok) {
          console.log(`‚úÖ –£–¥–∞–ª–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –≥–æ—Ä–æ–¥: ${city.name}`);
        }
      } catch (error) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è ${city.name}:`, error.message);
      }
    }
    
    // 3. –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤
    const mainCities = {
      'moskva': '/cities/moscow.jpg',
      'sankt-peterburg': '/cities/spb.jpg', 
      'ekaterinburg': '/cities/ekaterinburg.jpg',
      'kazan': '/cities/kazan.jpg'
    };
    
    console.log('\nüñºÔ∏è –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤...\n');
    
    for (const [slug, imageUrl] of Object.entries(mainCities)) {
      try {
        const updateResponse = await fetch(`http://localhost:3000/api/cities/${slug}`, {
          method: 'PATCH',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ imageUrl })
        });
        
        if (updateResponse.ok) {
          console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${slug} -> ${imageUrl}`);
        }
      } catch (error) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ${slug}:`, error.message);
      }
    }
    
    // 4. –§–∏–Ω–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫
    console.log('\nüìã –§–∏–Ω–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤:\n');
    const finalResponse = await fetch('http://localhost:3000/api/cities');
    const finalData = await finalResponse.json();
    const finalCities = finalData.cities || [];
    
    finalCities.forEach((city, index) => {
      console.log(`${index + 1}. ${city.name} (${city.slug})`);
      console.log(`   üì∑ ${city.imageUrl}`);
      console.log('');
    });
    
    console.log('‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n');
    
    // 5. –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('üéØ –ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:');
    console.log('   ‚Ä¢ –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ http://localhost:3000 - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É');
    console.log('   ‚Ä¢ –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ http://localhost:3000/admin/cities - —É–ø—Ä–∞–≤–ª—è—Ç—å –≥–æ—Ä–æ–¥–∞–º–∏');
    console.log('   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å scripts/city-manager.js –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏');
    console.log('');
    console.log('üìù –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:');
    console.log('   node scripts/city-manager.js list              - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –≥–æ—Ä–æ–¥–∞');
    console.log('   node scripts/city-manager.js add "–ì–æ—Ä–æ–¥" "URL" - –¥–æ–±–∞–≤–∏—Ç—å –≥–æ—Ä–æ–¥');
    console.log('   node scripts/city-manager.js update slug "URL" - –∏–∑–º–µ–Ω–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ');
    console.log('');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫
cleanup(); 
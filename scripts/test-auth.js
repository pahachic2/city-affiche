const mongoose = require('mongoose');
require('dotenv').config({ path: '.env.local' });

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB –¥–ª—è –ø—Ä—è–º—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
const connectDB = async () => {
  try {
    await mongoose.connect(process.env.MONGODB_URI, {
      bufferCommands: false,
      maxPoolSize: 10,
      serverSelectionTimeoutMS: 5000,
      socketTimeoutMS: 45000,
      connectTimeoutMS: 10000,
    });
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ MongoDB –¥–ª—è —Ç–µ—Å—Ç–æ–≤');
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', error);
    return false;
  }
};

// –°—Ö–µ–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä—è–º—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –ë–î
const UserSchema = new mongoose.Schema({
  email: { type: String, required: true, unique: true },
  name: { type: String, required: true },
  password: { type: String, required: true },
  avatar: { type: String, default: null },
}, { timestamps: true });

const User = mongoose.models.User || mongoose.model('User', UserSchema);

const BASE_URL = 'http://localhost:3000';

// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π email –¥–ª—è —Ç–µ—Å—Ç–æ–≤
const testEmail = `test-${Date.now()}@example.com`;
const testUser = {
  email: testEmail,
  name: 'Test User',
  password: 'testpassword123'
};

let authToken = '';
let userId = '';

async function testRegister() {
  console.log('\nüß™ –¢–µ—Å—Ç 1: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
  
  try {
    const response = await fetch(`${BASE_URL}/api/auth/register`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(testUser),
    });

    const data = await response.json();
    
    if (response.ok) {
      console.log('‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');
      console.log(`   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${data.user.name} (${data.user.email})`);
      console.log(`   ID: ${data.user._id}`);
      console.log(`   –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω: ${data.token ? '–î–∞' : '–ù–µ—Ç'}`);
      
      authToken = data.token;
      userId = data.user._id;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ–∞–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î
      const dbUser = await User.findById(userId);
      if (dbUser) {
        console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ –ë–î');
        console.log(`   Email –≤ –ë–î: ${dbUser.email}`);
        console.log(`   –°–æ–∑–¥–∞–Ω: ${dbUser.createdAt}`);
      } else {
        console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï –Ω–∞–π–¥–µ–Ω –≤ –ë–î');
      }
      
      return true;
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', data.error);
      return false;
    }
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error.message);
    return false;
  }
}

async function testLogin() {
  console.log('\nüß™ –¢–µ—Å—Ç 2: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
  
  try {
    const response = await fetch(`${BASE_URL}/api/auth/login`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        email: testUser.email,
        password: testUser.password,
      }),
    });

    const data = await response.json();
    
    if (response.ok) {
      console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');
      console.log(`   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${data.user.name}`);
      console.log(`   –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω: ${data.token ? '–î–∞' : '–ù–µ—Ç'}`);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω
      authToken = data.token;
      return true;
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', data.error);
      return false;
    }
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error.message);
    return false;
  }
}

async function testGetMe() {
  console.log('\nüß™ –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
  
  try {
    const response = await fetch(`${BASE_URL}/api/auth/me`, {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${authToken}`,
      },
    });

    const data = await response.json();
    
    if (response.ok) {
      console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã');
      console.log(`   ID: ${data.user._id}`);
      console.log(`   Email: ${data.user.email}`);
      console.log(`   –ò–º—è: ${data.user.name}`);
      return true;
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', data.error);
      return false;
    }
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error.message);
    return false;
  }
}

async function testUnauthorized() {
  console.log('\nüß™ –¢–µ—Å—Ç 4: –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø');
  
  try {
    const response = await fetch(`${BASE_URL}/api/auth/me`, {
      method: 'GET',
      // –ù–∞–º–µ—Ä–µ–Ω–Ω–æ –Ω–µ –ø–µ—Ä–µ–¥–∞–µ–º —Ç–æ–∫–µ–Ω
    });

    const data = await response.json();
    
    if (response.status === 401) {
      console.log('‚úÖ –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω');
      console.log(`   –û—à–∏–±–∫–∞: ${data.error}`);
      return true;
    } else {
      console.log('‚ùå –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –ù–ï –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω');
      return false;
    }
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error.message);
    return false;
  }
}

async function testInvalidToken() {
  console.log('\nüß™ –¢–µ—Å—Ç 5: –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω');
  
  try {
    const response = await fetch(`${BASE_URL}/api/auth/me`, {
      method: 'GET',
      headers: {
        'Authorization': 'Bearer invalid-token-here',
      },
    });

    const data = await response.json();
    
    if (response.status === 401) {
      console.log('‚úÖ –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω');
      console.log(`   –û—à–∏–±–∫–∞: ${data.error}`);
      return true;
    } else {
      console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –ù–ï –æ—Ç–∫–ª–æ–Ω–µ–Ω');
      return false;
    }
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error.message);
    return false;
  }
}

async function testLogout() {
  console.log('\nüß™ –¢–µ—Å—Ç 6: –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã');
  
  try {
    const response = await fetch(`${BASE_URL}/api/auth/logout`, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${authToken}`,
      },
    });

    const data = await response.json();
    
    if (response.ok) {
      console.log('‚úÖ –í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ');
      console.log(`   –°–æ–æ–±—â–µ–Ω–∏–µ: ${data.message}`);
      return true;
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞:', data.error);
      return false;
    }
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error.message);
    return false;
  }
}

// –¢–µ—Å—Ç –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
async function testDataPersistence() {
  console.log('\nüß™ –¢–µ—Å—Ç 7: –ü–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Å–µ –µ—â–µ –≤ –ë–î
    const dbUser = await User.findById(userId);
    if (dbUser) {
      console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î');
      console.log(`   Email: ${dbUser.email}`);
      console.log(`   –°–æ–∑–¥–∞–Ω: ${dbUser.createdAt.toISOString()}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞—Ä–æ–ª—å –∑–∞—Ö–µ—à–∏—Ä–æ–≤–∞–Ω
      if (dbUser.password !== testUser.password) {
        console.log('‚úÖ –ü–∞—Ä–æ–ª—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞—Ö–µ—à–∏—Ä–æ–≤–∞–Ω');
      } else {
        console.log('‚ùå –ü–∞—Ä–æ–ª—å –ù–ï –∑–∞—Ö–µ—à–∏—Ä–æ–≤–∞–Ω!');
      }
      
      return true;
    } else {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï –Ω–∞–π–¥–µ–Ω –≤ –ë–î');
      return false;
    }
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î:', error.message);
    return false;
  }
}

// –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
async function cleanup() {
  console.log('\nüßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
  
  try {
    if (userId) {
      await User.findByIdAndDelete(userId);
      console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω –∏–∑ –ë–î');
    }
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏:', error.message);
  }
}

async function runAllTests() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å —Ä–µ–∞–ª—å–Ω–æ–π –ë–î\n');
  
  // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
  const connected = await connectDB();
  if (!connected) {
    console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î. –¢–µ—Å—Ç—ã –æ—Ç–º–µ–Ω–µ–Ω—ã.');
    return;
  }
  
  const tests = [
    testRegister,
    testLogin,
    testGetMe,
    testUnauthorized,
    testInvalidToken,
    testLogout,
    testDataPersistence
  ];

  let passed = 0;
  let failed = 0;

  for (const test of tests) {
    const result = await test();
    if (result) {
      passed++;
    } else {
      failed++;
    }
    
    // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
    await new Promise(resolve => setTimeout(resolve, 100));
  }

  console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤:');
  console.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${passed}`);
  console.log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${failed}`);
  console.log(`üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${((passed / (passed + failed)) * 100).toFixed(1)}%`);

  // –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
  await cleanup();
  
  // –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç –ë–î
  await mongoose.disconnect();
  console.log('\nüîå –û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç MongoDB');
  
  if (failed === 0) {
    console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
  } else {
    console.log('\n‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ.');
  }
}

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  runAllTests().catch(console.error);
}

module.exports = { runAllTests }; 
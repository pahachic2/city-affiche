const mongoose = require('mongoose');

// –°—Ç—Ä–æ–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB (–±–∞–∑–∞ city-affiche)
const MONGODB_URI = 'mongodb://GRAFF:G3432664499@localhost:27017/city-affiche?authSource=admin';

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
const connectDB = async () => {
  try {
    await mongoose.connect(MONGODB_URI, {
      bufferCommands: false,
      maxPoolSize: 10,
      serverSelectionTimeoutMS: 5000,
      socketTimeoutMS: 45000,
      connectTimeoutMS: 10000,
    });
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ MongoDB');
    console.log(`üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${mongoose.connection.db?.databaseName || 'unknown'}`);
    console.log(`üîó –•–æ—Å—Ç: ${mongoose.connection.host}:${mongoose.connection.port}`);
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', error);
    return false;
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ points
async function createPointsCollection() {
  console.log('üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ points\n');
  
  // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
  const connected = await connectDB();
  if (!connected) {
    console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î');
    return;
  }
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π...');
    const collections = await mongoose.connection.db.listCollections().toArray();
    
    console.log('üìã –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏:');
    collections.forEach((collection, index) => {
      console.log(`   ${index + 1}. ${collection.name}`);
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∫–æ–ª–ª–µ–∫—Ü–∏—è points
    const pointsExists = collections.some(col => col.name === 'points');
    
    if (pointsExists) {
      console.log('\n‚ö†Ô∏è  –ö–æ–ª–ª–µ–∫—Ü–∏—è "points" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
      const pointsCount = await mongoose.connection.db.collection('points').countDocuments();
      console.log(`üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ points: ${pointsCount}`);
    } else {
      console.log('\nüìù –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏ "points"...');
      
      // –°–æ–∑–¥–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é
      await mongoose.connection.db.createCollection('points');
      console.log('‚úÖ –ö–æ–ª–ª–µ–∫—Ü–∏—è "points" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!');
    }
    
    // –°–æ–∑–¥–∞–µ–º —Å—Ö–µ–º—É –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ points (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    const PointSchema = new mongoose.Schema({
      name: {
        type: String,
        required: true,
        trim: true,
      },
      description: {
        type: String,
        trim: true,
      },
      coordinates: {
        latitude: {
          type: Number,
          required: true,
        },
        longitude: {
          type: Number,
          required: true,
        }
      },
      category: {
        type: String,
        default: 'general',
      },
      isActive: {
        type: Boolean,
        default: true,
      }
    }, {
      timestamps: true,
    });
    
    // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ points
    console.log('\nüìù –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ points...');
    
    try {
      await mongoose.connection.db.collection('points').createIndex({ name: 1 });
      console.log('‚úÖ –ò–Ω–¥–µ–∫—Å –ø–æ –ø–æ–ª—é "name" —Å–æ–∑–¥–∞–Ω');
      
      await mongoose.connection.db.collection('points').createIndex({ 
        "coordinates.latitude": 1, 
        "coordinates.longitude": 1 
      });
      console.log('‚úÖ –ò–Ω–¥–µ–∫—Å –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º —Å–æ–∑–¥–∞–Ω');
      
      await mongoose.connection.db.collection('points').createIndex({ category: 1 });
      console.log('‚úÖ –ò–Ω–¥–µ–∫—Å –ø–æ –ø–æ–ª—é "category" —Å–æ–∑–¥–∞–Ω');
      
      await mongoose.connection.db.collection('points').createIndex({ isActive: 1 });
      console.log('‚úÖ –ò–Ω–¥–µ–∫—Å –ø–æ –ø–æ–ª—é "isActive" —Å–æ–∑–¥–∞–Ω');
      
    } catch (indexError) {
      console.log('‚ö†Ô∏è  –ò–Ω–¥–µ–∫—Å—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è:', indexError.message);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    console.log('\nüîç –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞...');
    const finalCollections = await mongoose.connection.db.listCollections().toArray();
    const pointsCollection = finalCollections.find(col => col.name === 'points');
    
    if (pointsCollection) {
      console.log('‚úÖ –ö–æ–ª–ª–µ–∫—Ü–∏—è "points" –Ω–∞–π–¥–µ–Ω–∞');
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
      const pointsCount = await mongoose.connection.db.collection('points').countDocuments();
      console.log(`üìä –î–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ points: ${pointsCount}`);
    } else {
      console.log('‚ùå –ö–æ–ª–ª–µ–∫—Ü–∏—è "points" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Ç–æ—á–∫—É
    console.log('\nüìç –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π —Ç–æ—á–∫–∏...');
    
    const testPoint = {
      name: '–¢–µ—Å—Ç–æ–≤–∞—è —Ç–æ—á–∫–∞',
      description: '–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è —Ç–æ—á–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏',
      coordinates: {
        latitude: 55.7558,
        longitude: 37.6176
      },
      category: 'test',
      isActive: true,
      createdAt: new Date(),
      updatedAt: new Date()
    };
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–æ—á–∫–∏
    const existingTestPoints = await mongoose.connection.db.collection('points')
      .countDocuments({ category: 'test' });
    
    if (existingTestPoints === 0) {
      const result = await mongoose.connection.db.collection('points').insertOne(testPoint);
      console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è —Ç–æ—á–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞');
      console.log(`   ID: ${result.insertedId}`);
      console.log(`   –ù–∞–∑–≤–∞–Ω–∏–µ: ${testPoint.name}`);
      console.log(`   –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ${testPoint.coordinates.latitude}, ${testPoint.coordinates.longitude}`);
    } else {
      console.log('‚ö†Ô∏è  –¢–µ—Å—Ç–æ–≤—ã–µ —Ç–æ—á–∫–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏:', error);
  } finally {
    // –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç –ë–î
    await mongoose.disconnect();
    console.log('\nüîå –û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç MongoDB');
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ points
async function viewPointsCollection() {
  console.log('üëÅÔ∏è  –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–ª–ª–µ–∫—Ü–∏–∏ points\n');
  
  const connected = await connectDB();
  if (!connected) return;
  
  try {
    const points = await mongoose.connection.db.collection('points').find({}).toArray();
    
    if (points.length === 0) {
      console.log('üìç –ö–æ–ª–ª–µ–∫—Ü–∏—è points –ø—É—Å—Ç–∞');
    } else {
      console.log(`üìç –ù–∞–π–¥–µ–Ω–æ —Ç–æ—á–µ–∫: ${points.length}\n`);
      
      points.forEach((point, index) => {
        console.log(`${index + 1}. üìç ${point.name}`);
        console.log(`   üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${point.description || '–ù–µ—Ç'}`);
        console.log(`   üó∫Ô∏è  –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ${point.coordinates?.latitude}, ${point.coordinates?.longitude}`);
        console.log(`   üè∑Ô∏è  –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${point.category}`);
        console.log(`   ‚úÖ –ê–∫—Ç–∏–≤–Ω–∞: ${point.isActive ? '–î–∞' : '–ù–µ—Ç'}`);
        console.log(`   üìÖ –°–æ–∑–¥–∞–Ω–∞: ${point.createdAt}`);
        console.log(`   üÜî ID: ${point._id}`);
        console.log('   ' + '‚îÄ'.repeat(50));
      });
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏:', error);
  } finally {
    await mongoose.disconnect();
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  const command = process.argv[2];
  
  switch (command) {
    case 'view':
      await viewPointsCollection();
      break;
      
    default:
      await createPointsCollection();
  }
}

// –ó–∞–ø—É—Å–∫
if (require.main === module) {
  main().catch(console.error);
}

module.exports = { createPointsCollection, viewPointsCollection }; 
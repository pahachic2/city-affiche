// –°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –≥–æ—Ä–æ–¥–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö

// –í–∞—Ä–∏–∞–Ω—Ç 1: –õ–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–ø–æ–ª–æ–∂–∏—Ç–µ —Ñ–∞–π–ª—ã –≤ public/cities/)
const citiesLocal = [
  {
    name: '–ú–æ—Å–∫–≤–∞',
    slug: 'moscow',
    imageUrl: '/cities/moscow.jpg', // –õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
    eventsCount: 0
  },
  {
    name: '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥', 
    slug: 'sankt-peterburg',
    imageUrl: '/cities/spb.jpg', // –õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
    eventsCount: 0
  },
  {
    name: '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥',
    slug: 'ekaterinburg', 
    imageUrl: '/cities/ekaterinburg.jpg', // –õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
    eventsCount: 0
  },
  {
    name: '–ö–∞–∑–∞–Ω—å',
    slug: 'kazan',
    imageUrl: '/cities/kazan.jpg', // –õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
    eventsCount: 0
  }
];

// –í–∞—Ä–∏–∞–Ω—Ç 2: –í–Ω–µ—à–Ω–∏–µ URL (—Ä–∞–±–æ—Ç–∞—é—Ç —Å—Ä–∞–∑—É, –Ω–æ –∑–∞–≤–∏—Å—è—Ç –æ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞)
const citiesExternal = [
  {
    name: '–ú–æ—Å–∫–≤–∞',
    slug: 'moscow',
    imageUrl: 'https://images.unsplash.com/photo-1513326738677-b964603b136d?w=1200&h=600&fit=crop&crop=entropy&cs=tinysrgb',
    eventsCount: 0
  },
  {
    name: '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥', 
    slug: 'sankt-peterburg',
    imageUrl: 'https://images.unsplash.com/photo-1520637836862-4d197d17c767?w=1200&h=600&fit=crop&crop=entropy&cs=tinysrgb',
    eventsCount: 0
  },
  {
    name: '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥',
    slug: 'ekaterinburg', 
    imageUrl: 'https://images.unsplash.com/photo-1558618047-3c8c76ca7d13?w=1200&h=600&fit=crop&crop=entropy&cs=tinysrgb',
    eventsCount: 0
  },
  {
    name: '–ö–∞–∑–∞–Ω—å',
    slug: 'kazan',
    imageUrl: 'https://images.unsplash.com/photo-1584464491033-06628f3a6b7b?w=1200&h=600&fit=crop&crop=entropy&cs=tinysrgb', 
    eventsCount: 0
  }
];

// –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:
const cities = citiesExternal; // –ò–∑–º–µ–Ω–∏—Ç–µ –Ω–∞ citiesLocal –¥–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤

async function seedCities() {
  try {
    console.log('üå± –î–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ä–æ–¥–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...');
    
    for (const city of cities) {
      const response = await fetch('http://localhost:3000/api/cities', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(city),
      });
      
      if (response.ok) {
        console.log(`‚úÖ –ì–æ—Ä–æ–¥ "${city.name}" –¥–æ–±–∞–≤–ª–µ–Ω`);
      } else {
        const error = await response.json();
        console.log(`‚ö†Ô∏è –ì–æ—Ä–æ–¥ "${city.name}": ${error.error}`);
      }
    }
    
    console.log('üéâ –ì–æ—Ç–æ–≤–æ!');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞
async function updateCityImage(citySlug, newImageUrl) {
  try {
    const response = await fetch(`http://localhost:3000/api/cities/${citySlug}`, {
      method: 'PATCH',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ imageUrl: newImageUrl }),
    });
    
    if (response.ok) {
      console.log(`‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ "${citySlug}" –æ–±–Ω–æ–≤–ª–µ–Ω–æ`);
    } else {
      const error = await response.json();
      console.log(`‚ùå –û—à–∏–±–∫–∞: ${error.error}`);
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (typeof window === 'undefined') {
  seedCities();
}

module.exports = { cities, seedCities, updateCityImage }; 
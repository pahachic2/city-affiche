const mongoose = require('mongoose');
require('dotenv').config({ path: '.env.local' });

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
const connectDB = async () => {
  try {
    await mongoose.connect(process.env.MONGODB_URI, {
      bufferCommands: false,
      maxPoolSize: 10,
      serverSelectionTimeoutMS: 5000,
      socketTimeoutMS: 45000,
      connectTimeoutMS: 10000,
    });
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ MongoDB');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', error);
    process.exit(1);
  }
};

// –°—Ö–µ–º–∞ –≥–æ—Ä–æ–¥–∞
const CitySchema = new mongoose.Schema({
  name: {
    type: String,
    required: true,
    trim: true,
    unique: true,
  },
  slug: {
    type: String,
    required: true,
    unique: true,
    lowercase: true,
  },
  imageUrl: {
    type: String,
    required: true,
  },
  eventsCount: {
    type: Number,
    default: 0,
  },
}, {
  timestamps: true,
});

CitySchema.index({ name: 'text' });
CitySchema.index({ slug: 1 });

const City = mongoose.models.City || mongoose.model('City', CitySchema);

// –î–∞–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–æ–≤
const cities = [
  {
    name: '–ú–æ—Å–∫–≤–∞',
    slug: 'moscow',
    imageUrl: '/cities/moscow.jpg',
    eventsCount: 0,
  },
  {
    name: '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥',
    slug: 'spb',
    imageUrl: '/cities/spb.jpg',
    eventsCount: 0,
  },
  {
    name: '–ö–∞–∑–∞–Ω—å',
    slug: 'kazan',
    imageUrl: '/cities/kazan.jpg',
    eventsCount: 0,
  },
  {
    name: '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥',
    slug: 'ekaterinburg',
    imageUrl: '/cities/ekaterinburg.jpg',
    eventsCount: 0,
  },
];

async function seedCities() {
  try {
    await connectDB();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –≥–æ—Ä–æ–¥–∞ –≤ –ë–î
    const existingCities = await City.countDocuments();
    if (existingCities > 0) {
      console.log(`üìä –í –ë–î —É–∂–µ –µ—Å—Ç—å ${existingCities} –≥–æ—Ä–æ–¥–æ–≤. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º seed.`);
      return;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ä–æ–¥–∞
    for (const cityData of cities) {
      const existingCity = await City.findOne({ slug: cityData.slug });
      if (!existingCity) {
        const city = new City(cityData);
        await city.save();
        console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –≥–æ—Ä–æ–¥: ${cityData.name}`);
      } else {
        console.log(`‚ö†Ô∏è  –ì–æ—Ä–æ–¥ ${cityData.name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
      }
    }

    console.log('üéâ Seed –≥–æ—Ä–æ–¥–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ seed –≥–æ—Ä–æ–¥–æ–≤:', error);
  } finally {
    await mongoose.disconnect();
    console.log('üîå –û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç MongoDB');
  }
}

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  seedCities();
}

module.exports = { seedCities }; 
// –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è JWT –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏

const BASE_URL = 'http://localhost:3000';

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
const testUser = {
  email: `test-${Date.now()}@example.com`, // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π email
  name: '–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
  password: 'testpassword123'
};

let authToken = null;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
async function makeRequest(url, options = {}) {
  try {
    const response = await fetch(url, {
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      },
      ...options
    });

    const data = await response.json();
    return { response, data };
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ ${url}:`, error.message);
    return { error: error.message };
  }
}

// –¢–µ—Å—Ç 1: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function testRegister() {
  console.log('\nüîµ –¢–µ—Å—Ç 1: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
  
  const { response, data, error } = await makeRequest(`${BASE_URL}/api/auth/register`, {
    method: 'POST',
    body: JSON.stringify(testUser)
  });

  if (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏');
    return false;
  }

  if (response.status === 201 && data.token) {
    console.log('‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');
    console.log(`üìù –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${data.user.name} (${data.user.email})`);
    console.log(`üîë –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω: ${data.token.substring(0, 20)}...`);
    authToken = data.token;
    return true;
  } else {
    console.log(`‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ—É—Å–ø–µ—à–Ω–∞: ${data.error}`);
    return false;
  }
}

// –¢–µ—Å—Ç 2: –í—Ö–æ–¥ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function testLogin() {
  console.log('\nüîµ –¢–µ—Å—Ç 2: –í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
  
  const { response, data, error } = await makeRequest(`${BASE_URL}/api/auth/login`, {
    method: 'POST',
    body: JSON.stringify({
      email: testUser.email,
      password: testUser.password
    })
  });

  if (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏');
    return false;
  }

  if (response.status === 200 && data.token) {
    console.log('‚úÖ –í—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω');
    console.log(`üìù –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${data.user.name} (${data.user.email})`);
    console.log(`üîë –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω: ${data.token.substring(0, 20)}...`);
    authToken = data.token;
    return true;
  } else {
    console.log(`‚ùå –í—Ö–æ–¥ –Ω–µ—É—Å–ø–µ—à–µ–Ω: ${data.error}`);
    return false;
  }
}

// –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–æ–∫–µ–Ω–æ–º
async function testGetMe() {
  console.log('\nüîµ –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (/api/auth/me)');
  
  if (!authToken) {
    console.log('‚ùå –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
    return false;
  }

  const { response, data, error } = await makeRequest(`${BASE_URL}/api/auth/me`, {
    method: 'GET',
    headers: {
      'Authorization': `Bearer ${authToken}`
    }
  });

  if (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏');
    return false;
  }

  if (response.status === 200 && data.user) {
    console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω—ã');
    console.log(`üìù –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${data.user.name} (${data.user.email})`);
    console.log(`üìÖ –°–æ–∑–¥–∞–Ω: ${new Date(data.user.createdAt).toLocaleString()}`);
    return true;
  } else {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: ${data.error}`);
    return false;
  }
}

// –¢–µ—Å—Ç 4: –ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –±–µ–∑ —Ç–æ–∫–µ–Ω–∞
async function testUnauthorized() {
  console.log('\nüîµ –¢–µ—Å—Ç 4: –î–æ—Å—Ç—É–ø –±–µ–∑ —Ç–æ–∫–µ–Ω–∞ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω)');
  
  const { response, data, error } = await makeRequest(`${BASE_URL}/api/auth/me`, {
    method: 'GET'
  });

  if (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏');
    return false;
  }

  if (response.status === 401) {
    console.log('‚úÖ –î–æ—Å—Ç—É–ø –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–ø—Ä–µ—â–µ–Ω');
    console.log(`üìù –û—à–∏–±–∫–∞: ${data.error}`);
    return true;
  } else {
    console.log(`‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: ${response.status}`);
    return false;
  }
}

// –¢–µ—Å—Ç 5: –ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ —Å –Ω–µ–≤–µ—Ä–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º
async function testInvalidToken() {
  console.log('\nüîµ –¢–µ—Å—Ç 5: –î–æ—Å—Ç—É–ø —Å –Ω–µ–≤–µ—Ä–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º');
  
  const { response, data, error } = await makeRequest(`${BASE_URL}/api/auth/me`, {
    method: 'GET',
    headers: {
      'Authorization': 'Bearer invalid-token-12345'
    }
  });

  if (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏');
    return false;
  }

  if (response.status === 401) {
    console.log('‚úÖ –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω');
    console.log(`üìù –û—à–∏–±–∫–∞: ${data.error}`);
    return true;
  } else {
    console.log(`‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: ${response.status}`);
    return false;
  }
}

// –¢–µ—Å—Ç 6: –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
async function testLogout() {
  console.log('\nüîµ –¢–µ—Å—Ç 6: –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã');
  
  const { response, data, error } = await makeRequest(`${BASE_URL}/api/auth/logout`, {
    method: 'POST'
  });

  if (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏');
    return false;
  }

  if (response.status === 200) {
    console.log('‚úÖ –í—ã—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω');
    console.log(`üìù –°–æ–æ–±—â–µ–Ω–∏–µ: ${data.message}`);
    return true;
  } else {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞: ${data.error}`);
    return false;
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function runTests() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ JWT –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
  console.log('='.repeat(50));
  
  const results = [];
  
  // –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç—ã –ø–æ –ø–æ—Ä—è–¥–∫—É
  results.push(await testRegister());
  results.push(await testLogin());
  results.push(await testGetMe());
  results.push(await testUnauthorized());
  results.push(await testInvalidToken());
  results.push(await testLogout());
  
  // –ü–æ–¥–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
  console.log('\n' + '='.repeat(50));
  console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
  
  const passed = results.filter(r => r === true).length;
  const total = results.length;
  
  console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ: ${passed}/${total}`);
  console.log(`‚ùå –ù–µ—É—Å–ø–µ—à–Ω–æ: ${total - passed}/${total}`);
  
  if (passed === total) {
    console.log('üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!');
  } else {
    console.log('‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ.');
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
runTests().catch(console.error); 
// –°–∫—Ä–∏–ø—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º —Å API –∏ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö

async function diagnose() {
  console.log('üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º...\n');
  
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
    console.log('1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä–≤–µ—Ä...');
    const serverCheck = await fetch('http://localhost:3000/')
      .catch(err => ({ error: err.message }));
    
    if (serverCheck.error) {
      console.log('‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', serverCheck.error);
      console.log('üí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –∑–∞–ø—É—â–µ–Ω: npm run dev');
      return;
    }
    console.log('‚úÖ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç');
    
    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º API cities (GET)
    console.log('\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º API GET /api/cities...');
    const citiesResponse = await fetch('http://localhost:3000/api/cities');
    const citiesStatus = citiesResponse.status;
    const citiesText = await citiesResponse.text();
    
    console.log(`üìä –°—Ç–∞—Ç—É—Å: ${citiesStatus}`);
    console.log(`üìÑ –û—Ç–≤–µ—Ç:`, citiesText.substring(0, 200));
    
    if (citiesStatus !== 200) {
      console.log('‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å GET API');
      return;
    }
    
    // 3. –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –≥–æ—Ä–æ–¥
    console.log('\n3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞...');
    const testCity = {
      name: '–¢–µ—Å—Ç-–≥–æ—Ä–æ–¥',
      imageUrl: 'https://via.placeholder.com/400x200'
    };
    
    const createResponse = await fetch('http://localhost:3000/api/cities', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(testCity),
    });
    
    const createStatus = createResponse.status;
    const createText = await createResponse.text();
    
    console.log(`üìä –°—Ç–∞—Ç—É—Å —Å–æ–∑–¥–∞–Ω–∏—è: ${createStatus}`);
    console.log(`üìÑ –û—Ç–≤–µ—Ç —Å–æ–∑–¥–∞–Ω–∏—è:`, createText);
    
    if (createStatus === 201) {
      console.log('‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç!');
      
      // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –≥–æ—Ä–æ–¥
      const cityData = JSON.parse(createText);
      await fetch(`http://localhost:3000/api/cities/${cityData.slug}`, {
        method: 'DELETE'
      }).catch(() => {}); // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
      
    } else {
      console.log('‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –≥–æ—Ä–æ–¥–∞');
      console.log('üîç –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
      console.log('  - –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è MongoDB');
      console.log('  - –ü—Ä–æ–±–ª–µ–º—ã —Å –º–æ–¥–µ–ª—å—é City');
      console.log('  - –ü—Ä–æ–±–ª–µ–º—ã —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π');
    }
    
    // 4. –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç–æ—è—â–∏–µ –≥–æ—Ä–æ–¥–∞
    console.log('\n4Ô∏è‚É£ –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç–æ—è—â–∏–µ –≥–æ—Ä–æ–¥–∞...');
    await createRealCities();
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
  }
}

async function createRealCities() {
  const cities = [
    {
      name: '–ú–æ—Å–∫–≤–∞',
      imageUrl: 'https://images.unsplash.com/photo-1513326738677-b964603b136d?w=1200&h=600&fit=crop'
    },
    {
      name: '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥',
      imageUrl: 'https://images.unsplash.com/photo-1520637836862-4d197d17c767?w=1200&h=600&fit=crop'
    },
    {
      name: '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥',
      imageUrl: '/cities/ekaterinburg.jpg'  // –õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
    },
    {
      name: '–ö–∞–∑–∞–Ω—å',
      imageUrl: 'https://images.unsplash.com/photo-1584464491033-06628f3a6b7b?w=1200&h=600&fit=crop'
    }
  ];
  
  for (const city of cities) {
    try {
      const response = await fetch('http://localhost:3000/api/cities', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(city),
      });
      
      if (response.ok) {
        console.log(`‚úÖ –ì–æ—Ä–æ–¥ "${city.name}" —Å–æ–∑–¥–∞–Ω`);
      } else {
        const errorText = await response.text();
        console.log(`‚ùå –ì–æ—Ä–æ–¥ "${city.name}": ${errorText}`);
      }
    } catch (error) {
      console.log(`‚ùå –ì–æ—Ä–æ–¥ "${city.name}": ${error.message}`);
    }
  }
}

// –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
diagnose(); 
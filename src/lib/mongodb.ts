import mongoose from 'mongoose';

const MONGODB_URI = process.env.MONGODB_URI!;

if (!MONGODB_URI) {
  throw new Error('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è MONGODB_URI –≤ .env.local');
}

interface MongooseCache {
  conn: typeof mongoose | null;
  promise: Promise<typeof mongoose> | null;
}

// –í production –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∫—ç—à –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
declare global {
  var mongoose_cache: MongooseCache | undefined;
}

const cached: MongooseCache = global.mongoose_cache || {
  conn: null,
  promise: null,
};

if (!global.mongoose_cache) {
  global.mongoose_cache = cached;
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –ë–î
const connectOptions = {
  bufferCommands: false, // –û—Ç–∫–ª—é—á–∞–µ–º –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏—é - –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã –∂–¥–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  maxPoolSize: 10, // –ú–∞–∫—Å–∏–º—É–º 10 —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –≤ –ø—É–ª–µ
  serverSelectionTimeoutMS: 5000, // –¢–∞–π–º–∞—É—Ç –≤—ã–±–æ—Ä–∞ —Å–µ—Ä–≤–µ—Ä–∞ 5 —Å–µ–∫
  socketTimeoutMS: 45000, // –¢–∞–π–º–∞—É—Ç —Å–æ–∫–µ—Ç–∞ 45 —Å–µ–∫
  connectTimeoutMS: 10000, // –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è 10 —Å–µ–∫
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å —É—á–µ—Ç–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏—è
const log = {
  info: (message: string, ...args: unknown[]) => {
    if (process.env.NODE_ENV !== 'production') {
      console.log(message, ...args);
    }
  },
  error: (message: string, ...args: unknown[]) => {
    console.error(message, ...args);
  },
  warn: (message: string, ...args: unknown[]) => {
    console.warn(message, ...args);
  }
};

async function connectDB(): Promise<typeof mongoose> {
  // –ï—Å–ª–∏ —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
  if (cached.conn && mongoose.connection.readyState === 1) {
    return cached.conn;
  }

  // –ï—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ, –∂–¥–µ–º –µ–≥–æ
  if (cached.promise) {
    try {
      cached.conn = await cached.promise;
      return cached.conn;
    } catch (error) {
      cached.promise = null;
      throw error;
    }
  }

  // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
  cached.promise = mongoose.connect(MONGODB_URI, connectOptions)
    .then((mongoose) => {
      log.info('‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ MongoDB');
      log.info(`üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${mongoose.connection.db?.databaseName || 'unknown'}`);
      log.info(`üîó –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${mongoose.connection.readyState}`);
      return mongoose;
    })
    .catch((error) => {
      log.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', error.message);
      cached.promise = null;
      throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ MongoDB: ${error.message}`);
    });

  try {
    cached.conn = await cached.promise;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    mongoose.connection.on('error', (error) => {
      log.error('üî• –û—à–∏–±–∫–∞ MongoDB:', error);
    });
    
    mongoose.connection.on('disconnected', () => {
      log.warn('‚ö†Ô∏è  MongoDB –æ—Ç–∫–ª—é—á–µ–Ω–∞');
      cached.conn = null;
      cached.promise = null;
    });

    mongoose.connection.on('reconnected', () => {
      log.info('üîÑ MongoDB –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
    });

    return cached.conn;
  } catch (error) {
    cached.promise = null;
    cached.conn = null;
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
export async function checkConnection(): Promise<boolean> {
  try {
    const readyState = mongoose.connection.readyState as number;
    if (readyState === 1) {
      return true;
    }
    await connectDB();
    return (mongoose.connection.readyState as number) === 1;
  } catch (error) {
    log.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error);
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–¥–ª—è —Ç–µ—Å—Ç–æ–≤)
export async function disconnectDB(): Promise<void> {
  if (cached.conn) {
    await mongoose.disconnect();
    cached.conn = null;
    cached.promise = null;
    log.info('üîå –û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç MongoDB');
  }
}

export default connectDB; 
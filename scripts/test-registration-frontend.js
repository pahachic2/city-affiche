const mongoose = require('mongoose');
require('dotenv').config({ path: '.env.local' });

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
const connectDB = async () => {
  try {
    await mongoose.connect(process.env.MONGODB_URI, {
      bufferCommands: false,
      maxPoolSize: 10,
      serverSelectionTimeoutMS: 5000,
      socketTimeoutMS: 45000,
      connectTimeoutMS: 10000,
    });
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', error);
    return false;
  }
};

// –°—Ö–µ–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
const UserSchema = new mongoose.Schema({
  email: { type: String, required: true, unique: true },
  name: { type: String, required: true },
  password: { type: String, required: true },
  avatar: { type: String, default: null },
}, { timestamps: true });

const User = mongoose.models.User || mongoose.model('User', UserSchema);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
async function testRegistration() {
  console.log('üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ API\n');
  
  // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
  const connected = await connectDB();
  if (!connected) {
    console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î');
    return;
  }
  
  // –°—á–∏—Ç–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
  const usersBefore = await User.countDocuments();
  console.log(`üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ë–î –¥–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${usersBefore}`);
  
  // –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
  const testUser = {
    email: `frontend-test-${Date.now()}@example.com`,
    name: 'Frontend –¢–µ—Å—Ç',
    password: 'testpass123'
  };
  
  console.log('üìù –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:');
  console.log(`   Email: ${testUser.email}`);
  console.log(`   Name: ${testUser.name}`);
  console.log(`   Password: ${testUser.password}`);
  
  try {
    console.log('\nüåê –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é...');
    
    const response = await fetch('http://localhost:3000/api/auth/register', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(testUser),
    });
    
    console.log(`üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.status} ${response.statusText}`);
    
    const data = await response.json();
    console.log('üìÑ –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', JSON.stringify(data, null, 2));
    
    if (response.ok) {
      console.log('\n‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ API —É—Å–ø–µ—à–Ω–∞!');
      console.log(`   ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${data.user._id}`);
      console.log(`   –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω: ${data.token ? '–î–∞' : '–ù–µ—Ç'}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –ë–î
      console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
      const dbUser = await User.findById(data.user._id);
      
      if (dbUser) {
        console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ –ë–î!');
        console.log(`   Email –≤ –ë–î: ${dbUser.email}`);
        console.log(`   –ò–º—è –≤ –ë–î: ${dbUser.name}`);
        console.log(`   –°–æ–∑–¥–∞–Ω: ${dbUser.createdAt}`);
        console.log(`   –ü–∞—Ä–æ–ª—å –∑–∞—Ö–µ—à–∏—Ä–æ–≤–∞–Ω: ${dbUser.password !== testUser.password ? '–î–∞' : '–ù–µ—Ç'}`);
      } else {
        console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï –Ω–∞–π–¥–µ–Ω –≤ –ë–î!');
      }
      
      // –°—á–∏—Ç–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
      const usersAfter = await User.countDocuments();
      console.log(`\nüìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ë–î –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${usersAfter}`);
      console.log(`üìà –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${usersAfter - usersBefore}`);
      
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —Å –Ω–æ–≤—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
      console.log('\nüîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');
      const loginResponse = await fetch('http://localhost:3000/api/auth/login', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          email: testUser.email,
          password: testUser.password,
        }),
      });
      
      const loginData = await loginResponse.json();
      
      if (loginResponse.ok) {
        console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!');
        console.log(`   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${loginData.user.name}`);
      } else {
        console.log('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', loginData.error);
      }
      
    } else {
      console.log('\n‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:');
      console.log(`   –°–æ–æ–±—â–µ–Ω–∏–µ: ${data.error}`);
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
      if (data.error?.includes('email')) {
        console.log('   –í–æ–∑–º–æ–∂–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞: –ü—Ä–æ–±–ª–µ–º–∞ —Å email –∞–¥—Ä–µ—Å–æ–º');
      }
      if (data.error?.includes('–ø–æ–ª—è')) {
        console.log('   –í–æ–∑–º–æ–∂–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞: –ù–µ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã');
      }
    }
    
  } catch (error) {
    console.log('\n‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–µ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞:', error.message);
    console.log('   –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
    console.log('   - –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω');
    console.log('   - –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—Ç');
    console.log('   - –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é');
  }
  
  // –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç –ë–î
  await mongoose.disconnect();
  console.log('\nüîå –û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç MongoDB');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ë–î
async function checkCurrentState() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ë–î...\n');
  
  const connected = await connectDB();
  if (!connected) return;
  
  const totalUsers = await User.countDocuments();
  console.log(`üìä –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${totalUsers}`);
  
  if (totalUsers > 0) {
    console.log('\nüë• –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:');
    const recentUsers = await User.find({}, 'email name createdAt')
      .sort({ createdAt: -1 })
      .limit(5)
      .lean();
    
    recentUsers.forEach((user, index) => {
      console.log(`   ${index + 1}. ${user.name} (${user.email})`);
      console.log(`      –°–æ–∑–¥–∞–Ω: ${user.createdAt}`);
    });
  }
  
  await mongoose.disconnect();
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  const action = process.argv[2];
  
  if (action === 'check') {
    await checkCurrentState();
  } else {
    await testRegistration();
  }
}

// –ó–∞–ø—É—Å–∫
if (require.main === module) {
  main().catch(console.error);
}

module.exports = { testRegistration, checkCurrentState }; 
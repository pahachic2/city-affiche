// –°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

const testUsers = [
  {
    email: 'admin@cityaffiche.ru',
    name: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
    avatar: 'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=100&h=100&fit=crop&crop=face'
  },
  {
    email: 'organizer1@cityaffiche.ru', 
    name: '–ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞',
    avatar: 'https://images.unsplash.com/photo-1494790108755-2616b612b786?w=100&h=100&fit=crop&crop=face'
  },
  {
    email: 'organizer2@cityaffiche.ru',
    name: '–ú–∏—Ö–∞–∏–ª –ò–≤–∞–Ω–æ–≤', 
    avatar: 'https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=100&h=100&fit=crop&crop=face'
  },
  {
    email: 'organizer3@cityaffiche.ru',
    name: '–ï–ª–µ–Ω–∞ –°–∏–¥–æ—Ä–æ–≤–∞',
    avatar: 'https://images.unsplash.com/photo-1438761681033-6461ffad8d80?w=100&h=100&fit=crop&crop=face'
  },
  {
    email: 'organizer4@cityaffiche.ru',
    name: '–î–º–∏—Ç—Ä–∏–π –ö–æ–∑–ª–æ–≤',
    avatar: 'https://images.unsplash.com/photo-1500648767791-00dcc994a43e?w=100&h=100&fit=crop&crop=face'
  }
];

async function createUser(userData) {
  try {
    const response = await fetch('http://localhost:3000/api/users', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(userData),
    });
    
    if (response.ok) {
      const user = await response.json();
      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userData.name} (${userData.email})`);
      return user;
    } else {
      const error = await response.json();
      console.log(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userData.name}: ${error.error}`);
      return null;
    }
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userData.name}: ${error.message}`);
    return null;
  }
}

async function seedUsers() {
  console.log('üë• –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...\n');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
  try {
    await fetch('http://localhost:3000/api/users');
  } catch (error) {
    console.log('‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω! –ó–∞–ø—É—Å—Ç–∏—Ç–µ: npm run dev');
    return;
  }
  
  const createdUsers = [];
  let created = 0;
  let failed = 0;
  
  for (const userData of testUsers) {
    const result = await createUser(userData);
    if (result) {
      createdUsers.push(result);
      created++;
    } else {
      failed++;
    }
    
    // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    await new Promise(resolve => setTimeout(resolve, 100));
  }
  
  console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:`);
  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ: ${created} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
  console.log(`‚ùå –û—à–∏–±–æ–∫: ${failed}`);
  
  if (createdUsers.length > 0) {
    console.log(`\nüë§ ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:`);
    createdUsers.forEach((user, index) => {
      console.log(`${index + 1}. ${user.name}: ${user._id}`);
    });
  }
  
  return createdUsers;
}

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (typeof window === 'undefined') {
  seedUsers();
}

module.exports = { seedUsers, testUsers }; 
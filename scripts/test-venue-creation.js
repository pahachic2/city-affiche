const { MongoClient, ObjectId } = require('mongodb');
require('dotenv').config({ path: '.env.local' });

const MONGODB_URI = process.env.MONGODB_URI;

if (!MONGODB_URI) {
  console.error('‚ùå MONGODB_URI –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
  process.exit(1);
}

async function testVenueCreation() {
  const client = new MongoClient(MONGODB_URI);
  
  try {
    console.log('üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB...');
    await client.connect();
    
    const db = client.db();
    console.log(`‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: ${db.databaseName}`);
    
    // –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const usersCollection = db.collection('users');
    const testUser = await usersCollection.findOne({});
    
    if (!testUser) {
      console.error('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
      return;
    }
    
    console.log(`üë§ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${testUser.name} (${testUser.email})`);
    
    // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è
    const testVenues = [
      {
        name: '–ö–∞—Ñ–µ –ü—É—à–∫–∏–Ω',
        slug: 'cafe-pushkin',
        description: '–£—é—Ç–Ω–æ–µ –∫–∞—Ñ–µ –≤ —Ü–µ–Ω—Ç—Ä–µ –≥–æ—Ä–æ–¥–∞ —Å —Ä—É—Å—Å–∫–æ–π –∫—É—Ö–Ω–µ–π –∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä–æ–π 19 –≤–µ–∫–∞. –ò–¥–µ–∞–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ –¥–ª—è —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏—Ö —Å–≤–∏–¥–∞–Ω–∏–π –∏ –¥–µ–ª–æ–≤—ã—Ö –≤—Å—Ç—Ä–µ—á.',
        images: [],
        imageTypes: [],
        address: '–¢–≤–µ—Ä—Å–∫–æ–π –±—É–ª—å–≤–∞—Ä, 26–ê',
        city: '–ú–æ—Å–∫–≤–∞',
        category: '–ö–∞—Ñ–µ',
        authorId: testUser._id,
        messages: [],
        upvotes: 5,
        downvotes: 1,
        rating: 4,
        commentsCount: 0,
        viewsCount: 0,
        createdAt: new Date(),
        updatedAt: new Date()
      },
      {
        name: '–ë–µ–ª—ã–π –∫—Ä–æ–ª–∏–∫',
        slug: 'white-rabbit',
        description: '–†–µ—Å—Ç–æ—Ä–∞–Ω –≤—ã—Å–æ–∫–æ–π –∫—É—Ö–Ω–∏ —Å –ø–∞–Ω–æ—Ä–∞–º–Ω—ã–º –≤–∏–¥–æ–º –Ω–∞ –ú–æ—Å–∫–≤—É. –ê–≤—Ç–æ—Ä—Å–∫–∞—è –∫—É—Ö–Ω—è –æ—Ç —à–µ—Ñ-–ø–æ–≤–∞—Ä–∞ –º–∏—Ä–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è.',
        images: [],
        imageTypes: [],
        address: '–°–º–æ–ª–µ–Ω—Å–∫–∞—è –ø–ª–æ—â–∞–¥—å, 3',
        city: '–ú–æ—Å–∫–≤–∞',
        category: '–†–µ—Å—Ç–æ—Ä–∞–Ω—ã',
        authorId: testUser._id,
        messages: [],
        upvotes: 15,
        downvotes: 2,
        rating: 13,
        commentsCount: 0,
        viewsCount: 0,
        createdAt: new Date(),
        updatedAt: new Date()
      },
      {
        name: '–≠—Ä–º–∏—Ç–∞–∂',
        slug: 'hermitage',
        description: '–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π –≠—Ä–º–∏—Ç–∞–∂ ‚Äî –∫—Ä—É–ø–Ω–µ–π—à–∏–π –≤ –†–æ—Å—Å–∏–∏ –∏ –æ–¥–∏–Ω –∏–∑ –∫—Ä—É–ø–Ω–µ–π—à–∏—Ö –≤ –º–∏—Ä–µ —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏ –∫—É–ª—å—Ç—É—Ä–Ω–æ-–∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –º—É–∑–µ–µ–≤.',
        images: [],
        imageTypes: [],
        address: '–î–≤–æ—Ä—Ü–æ–≤–∞—è –ø–ª–æ—â–∞–¥—å, 2',
        city: '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥',
        category: '–ú—É–∑–µ–∏',
        authorId: testUser._id,
        messages: [],
        upvotes: 25,
        downvotes: 0,
        rating: 25,
        commentsCount: 0,
        viewsCount: 0,
        createdAt: new Date(),
        updatedAt: new Date()
      }
    ];
    
    const venuesCollection = db.collection('venues');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É—é—Ç –ª–∏ —É–∂–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è
    for (const venue of testVenues) {
      const existing = await venuesCollection.findOne({ 
        city: venue.city, 
        slug: venue.slug 
      });
      
      if (existing) {
        console.log(`‚ö†Ô∏è  –ó–∞–≤–µ–¥–µ–Ω–∏–µ "${venue.name}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
        continue;
      }
      
      // –°–æ–∑–¥–∞–µ–º –∑–∞–≤–µ–¥–µ–Ω–∏–µ
      const result = await venuesCollection.insertOne(venue);
      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ –∑–∞–≤–µ–¥–µ–Ω–∏–µ: "${venue.name}" (ID: ${result.insertedId})`);
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const totalVenues = await venuesCollection.countDocuments();
    console.log(`\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
    console.log(`   –í—Å–µ–≥–æ –∑–∞–≤–µ–¥–µ–Ω–∏–π: ${totalVenues}`);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≤–µ–¥–µ–Ω–∏—è –ø–æ –≥–æ—Ä–æ–¥–∞–º
    const venuesByCity = await venuesCollection.aggregate([
      {
        $group: {
          _id: '$city',
          count: { $sum: 1 },
          venues: { $push: '$name' }
        }
      }
    ]).toArray();
    
    console.log(`\nüèôÔ∏è  –ó–∞–≤–µ–¥–µ–Ω–∏—è –ø–æ –≥–æ—Ä–æ–¥–∞–º:`);
    for (const cityData of venuesByCity) {
      console.log(`   ${cityData._id}: ${cityData.count} –∑–∞–≤–µ–¥–µ–Ω–∏–π`);
      cityData.venues.forEach(name => {
        console.log(`      ‚Ä¢ ${name}`);
      });
    }
    
    console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–≤–µ–¥–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
    process.exit(1);
  } finally {
    await client.close();
    console.log('üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ');
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
testVenueCreation(); 
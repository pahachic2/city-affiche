const mongoose = require('mongoose');
require('dotenv').config({ path: '.env.local' });

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
const connectDB = async () => {
  try {
    await mongoose.connect(process.env.MONGODB_URI, {
      bufferCommands: false,
      maxPoolSize: 10,
      serverSelectionTimeoutMS: 5000,
      socketTimeoutMS: 45000,
      connectTimeoutMS: 10000,
    });
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ MongoDB');
    console.log(`üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${mongoose.connection.db?.databaseName || 'unknown'}`);
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', error);
    return false;
  }
};

// –°—Ö–µ–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const UserSchema = new mongoose.Schema({
  email: { type: String, required: true, unique: true },
  name: { type: String, required: true },
  password: { type: String, required: true },
  avatar: { type: String, default: null },
}, { timestamps: true });

const User = mongoose.models.User || mongoose.model('User', UserSchema);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async function viewAllUsers() {
  console.log('üë• –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö\n');
  
  const connected = await connectDB();
  if (!connected) {
    console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î');
    return;
  }
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const users = await User.find({}, 'email name avatar createdAt updatedAt')
      .sort({ createdAt: 1 }) // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (—Å—Ç–∞—Ä—ã–µ —Å–Ω–∞—á–∞–ª–∞)
      .lean();
    
    console.log(`üìä –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}\n`);
    
    if (users.length === 0) {
      console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      return;
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users.forEach((user, index) => {
      console.log(`${index + 1}. üë§ ${user.name}`);
      console.log(`   üìß Email: ${user.email}`);
      console.log(`   üñºÔ∏è  Avatar: ${user.avatar || '–ù–µ—Ç'}`);
      console.log(`   üìÖ –°–æ–∑–¥–∞–Ω: ${new Date(user.createdAt).toLocaleString('ru-RU')}`);
      console.log(`   üîÑ –û–±–Ω–æ–≤–ª–µ–Ω: ${new Date(user.updatedAt).toLocaleString('ru-RU')}`);
      console.log(`   üÜî ID: ${user._id}`);
      console.log('   ' + '‚îÄ'.repeat(50));
    });
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    console.log('\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
    
    // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–æ–º–µ–Ω–∞–º email
    const emailDomains = {};
    users.forEach(user => {
      const domain = user.email.split('@')[1];
      emailDomains[domain] = (emailDomains[domain] || 0) + 1;
    });
    
    console.log('\nüìß –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –¥–æ–º–µ–Ω–∞–º email:');
    Object.entries(emailDomains)
      .sort(([,a], [,b]) => b - a)
      .forEach(([domain, count]) => {
        console.log(`   ${domain}: ${count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
      });
    
    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –∞–≤–∞—Ç–∞—Ä–∞–º–∏
    const usersWithAvatars = users.filter(user => user.avatar).length;
    console.log(`\nüñºÔ∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–≤–∞—Ç–∞—Ä–∞–º–∏: ${usersWithAvatars} –∏–∑ ${users.length}`);
    
    // –ü–æ –¥–∞—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    const today = new Date();
    const todayUsers = users.filter(user => {
      const userDate = new Date(user.createdAt);
      return userDate.toDateString() === today.toDateString();
    }).length;
    
    console.log(`üìÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è: ${todayUsers}`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
  } finally {
    await mongoose.disconnect();
    console.log('\nüîå –û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç MongoDB');
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function findUser(searchTerm) {
  console.log(`üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "${searchTerm}"\n`);
  
  const connected = await connectDB();
  if (!connected) return;
  
  try {
    // –ò—â–µ–º –ø–æ email –∏–ª–∏ –∏–º–µ–Ω–∏
    const users = await User.find({
      $or: [
        { email: { $regex: searchTerm, $options: 'i' } },
        { name: { $regex: searchTerm, $options: 'i' } }
      ]
    }, 'email name avatar createdAt').lean();
    
    if (users.length === 0) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    } else {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}\n`);
      users.forEach((user, index) => {
        console.log(`${index + 1}. ${user.name} (${user.email})`);
        console.log(`   –°–æ–∑–¥–∞–Ω: ${new Date(user.createdAt).toLocaleString('ru-RU')}`);
        console.log(`   ID: ${user._id}`);
        console.log();
      });
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:', error);
  } finally {
    await mongoose.disconnect();
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async function cleanupTestUsers() {
  console.log('üßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...\n');
  
  const connected = await connectDB();
  if (!connected) return;
  
  try {
    // –ò—â–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const testUsers = await User.find({
      $or: [
        { email: { $regex: 'test.*@example\\.com', $options: 'i' } },
        { email: { $regex: 'api-test', $options: 'i' } },
        { name: { $regex: '—Ç–µ—Å—Ç', $options: 'i' } },
        { name: { $regex: 'test', $options: 'i' } }
      ]
    }).lean();
    
    if (testUsers.length === 0) {
      console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    } else {
      console.log(`‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${testUsers.length}`);
      testUsers.forEach((user, index) => {
        console.log(`   ${index + 1}. ${user.name} (${user.email})`);
      });
      
      console.log('\n‚ùì –•–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏—Ö? –ó–∞–ø—É—Å—Ç–∏—Ç–µ: node scripts/view-users.js cleanup confirm');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
  } finally {
    await mongoose.disconnect();
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
async function confirmCleanup() {
  console.log('üóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...\n');
  
  const connected = await connectDB();
  if (!connected) return;
  
  try {
    const result = await User.deleteMany({
      $or: [
        { email: { $regex: 'test.*@example\\.com', $options: 'i' } },
        { email: { $regex: 'api-test', $options: 'i' } },
        { name: { $regex: '—Ç–µ—Å—Ç', $options: 'i' } },
        { name: { $regex: 'test', $options: 'i' } }
      ]
    });
    
    console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${result.deletedCount}`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:', error);
  } finally {
    await mongoose.disconnect();
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  const command = process.argv[2];
  const param = process.argv[3];
  
  switch (command) {
    case 'search':
      if (param) {
        await findUser(param);
      } else {
        console.log('‚ùå –£–∫–∞–∂–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: node scripts/view-users.js search "—Ç–µ–∫—Å—Ç"');
      }
      break;
      
    case 'cleanup':
      if (param === 'confirm') {
        await confirmCleanup();
      } else {
        await cleanupTestUsers();
      }
      break;
      
    default:
      await viewAllUsers();
  }
}

// –ó–∞–ø—É—Å–∫
if (require.main === module) {
  main().catch(console.error);
}

module.exports = { viewAllUsers, findUser, cleanupTestUsers }; 
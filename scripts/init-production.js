const mongoose = require('mongoose');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
function validateEnvironment() {
  const requiredVars = [
    'MONGODB_URI',
    'JWT_SECRET',
    'NEXTAUTH_SECRET',
    'NEXTAUTH_URL'
  ];

  const missing = requiredVars.filter(varName => !process.env[varName]);
  
  if (missing.length > 0) {
    console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
    missing.forEach(varName => {
      console.error(`   - ${varName}`);
    });
    console.error('\nüìù –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Vercel –∏–ª–∏ .env.local');
    process.exit(1);
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å JWT_SECRET
  if (process.env.JWT_SECRET && process.env.JWT_SECRET.length < 32) {
    console.warn('‚ö†Ô∏è  JWT_SECRET –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 32 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏');
  }

  console.log('‚úÖ –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω—ã');
}

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
const connectDB = async () => {
  try {
    await mongoose.connect(process.env.MONGODB_URI, {
      bufferCommands: false,
      maxPoolSize: 10,
      serverSelectionTimeoutMS: 10000,
      socketTimeoutMS: 45000,
      connectTimeoutMS: 10000,
    });
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ MongoDB');
    console.log(`üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${mongoose.connection.db?.databaseName || 'unknown'}`);
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', error.message);
    return false;
  }
};

// –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
const createIndexes = async () => {
  try {
    console.log('üìù –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤...');
    
    const db = mongoose.connection.db;
    
    // –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ events
    await db.collection('events').createIndex({ city: 1, date: 1 });
    await db.collection('events').createIndex({ category: 1 });
    await db.collection('events').createIndex({ authorId: 1 });
    await db.collection('events').createIndex({ date: 1 });
    
    // –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ users
    await db.collection('users').createIndex({ email: 1 }, { unique: true });
    
    // –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ cities
    await db.collection('cities').createIndex({ slug: 1 }, { unique: true });
    await db.collection('cities').createIndex({ name: 1 });
    
    // –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ votes
    await db.collection('votes').createIndex({ userId: 1, eventId: 1 }, { unique: true });
    await db.collection('votes').createIndex({ eventId: 1 });
    
    // –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ messages
    await db.collection('messages').createIndex({ eventId: 1, createdAt: -1 });
    await db.collection('messages').createIndex({ userId: 1 });
    
    console.log('‚úÖ –ò–Ω–¥–µ–∫—Å—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤:', error.message);
  }
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
const seedBasicData = async () => {
  try {
    console.log('üå± –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
    
    const db = mongoose.connection.db;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≥–æ—Ä–æ–¥–æ–≤
    const citiesCount = await db.collection('cities').countDocuments();
    
    if (citiesCount === 0) {
      console.log('üìç –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –≥–æ—Ä–æ–¥–æ–≤...');
      
      const basicCities = [
        {
          name: '–ú–æ—Å–∫–≤–∞',
          slug: 'moskva',
          imageUrl: '/cities/moscow.jpg',
          eventsCount: 0,
          createdAt: new Date(),
          updatedAt: new Date()
        },
        {
          name: '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥',
          slug: 'sankt-peterburg',
          imageUrl: '/cities/spb.jpg',
          eventsCount: 0,
          createdAt: new Date(),
          updatedAt: new Date()
        },
        {
          name: '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥',
          slug: 'ekaterinburg',
          imageUrl: '/cities/ekaterinburg.jpg',
          eventsCount: 0,
          createdAt: new Date(),
          updatedAt: new Date()
        },
        {
          name: '–ö–∞–∑–∞–Ω—å',
          slug: 'kazan',
          imageUrl: '/cities/kazan.jpg',
          eventsCount: 0,
          createdAt: new Date(),
          updatedAt: new Date()
        }
      ];
      
      await db.collection('cities').insertMany(basicCities);
      console.log('‚úÖ –ë–∞–∑–æ–≤—ã–µ –≥–æ—Ä–æ–¥–∞ —Å–æ–∑–¥–∞–Ω—ã');
    } else {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${citiesCount} –≥–æ—Ä–æ–¥–æ–≤ –≤ –±–∞–∑–µ`);
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error.message);
  }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const getDBStats = async () => {
  try {
    console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:');
    
    const collections = ['users', 'events', 'cities', 'messages', 'votes'];
    
    for (const collectionName of collections) {
      try {
        const count = await mongoose.connection.db.collection(collectionName).countDocuments();
        console.log(`   ${collectionName}: ${count} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤`);
      } catch (error) {
        console.log(`   ${collectionName}: –∫–æ–ª–ª–µ–∫—Ü–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
      }
    }
    
    // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–î
    const stats = await mongoose.connection.db.stats();
    console.log(`\nüíæ –†–∞–∑–º–µ—Ä –ë–î: ${(stats.dataSize / 1024 / 1024).toFixed(2)} MB`);
    console.log(`üìÅ –ö–æ–ª–ª–µ–∫—Ü–∏–π: ${stats.collections}`);
    console.log(`üìÑ –û–±—ä–µ–∫—Ç–æ–≤: ${stats.objects}`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
  }
};

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
async function initProduction() {
  console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...\n');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
  validateEnvironment();
  
  // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
  const connected = await connectDB();
  if (!connected) {
    process.exit(1);
  }
  
  // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
  await createIndexes();
  
  // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
  await seedBasicData();
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  await getDBStats();
  
  console.log('\nüéâ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
  console.log('\nüìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
  console.log('   1. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ Vercel');
  console.log('   2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
  console.log('   3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ');
}

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  initProduction().then(() => {
    mongoose.disconnect();
    console.log('üîå –û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç MongoDB');
    process.exit(0);
  }).catch((error) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
    mongoose.disconnect();
    process.exit(1);
  });
}

module.exports = { initProduction, validateEnvironment }; 